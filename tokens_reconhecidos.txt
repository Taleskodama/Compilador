comenzar -> delimitador de bloco: iniciar
ent -> tipo de dado: inteiro
idade -> identificador
!! -> fim de instrução/sentença
real -> tipo de dado: real
saldo -> identificador
!! -> fim de instrução/sentença
chr -> tipo de dado: caractere
categoria -> identificador
!! -> fim de instrução/sentença
ent -> tipo de dado: inteiro
multiplicador -> identificador
!! -> fim de instrução/sentença
real -> tipo de dado: real
taxaJuros -> identificador
!! -> fim de instrução/sentença
ent -> tipo de dado: inteiro
resultadoLogico -> identificador
!! -> fim de instrução/sentença
taxaJuros -> identificador
:= -> operador de atribuição
0.05 -> número real
!! -> fim de instrução/sentença
# -> símbolo de saída
=> -> operador de saída (exibição)
"Digite sua idade: " -> string literal
!! -> fim de instrução/sentença
& -> símbolo de entrada
idade -> identificador
<= -> operador de entrada (leitura)
!! -> fim de instrução/sentença
# -> símbolo de saída
=> -> operador de saída (exibição)
"Digite seu saldo: " -> string literal
!! -> fim de instrução/sentença
& -> símbolo de entrada
saldo -> identificador
<= -> operador de entrada (leitura)
!! -> fim de instrução/sentença
# -> símbolo de saída
=> -> operador de saída (exibição)
"Digite a categoria (A, B, C): " -> string literal
!! -> fim de instrução/sentença
& -> símbolo de entrada
categoria -> identificador
<= -> operador de entrada (leitura)
!! -> fim de instrução/sentença
si -> comando condicional: if
@{ -> parêntese esquerdo
idade -> identificador
>> -> operador relacional: maior que
18 -> número inteiro
<<>> -> operador lógico: AND
saldo -> identificador
[* -> operador relacional: menor ou igual
1000.0 -> número real
}@ -> parêntese direito
comenzar -> delimitador de bloco: iniciar
# -> símbolo de saída
=> -> operador de saída (exibição)
"Acesso permitido ou condicoes favoraveis!" -> string literal
!! -> fim de instrução/sentença
multiplicador -> identificador
:= -> operador de atribuição
idade -> identificador
por -> operador aritmético: multiplicação
2 -> número inteiro
!! -> fim de instrução/sentença
resultadoLogico -> identificador
:= -> operador de atribuição
1 -> número inteiro
!! -> fim de instrução/sentença
fin -> delimitador de bloco: finalizar
demas -> comando condicional: else
comenzar -> delimitador de bloco: iniciar
# -> símbolo de saída
=> -> operador de saída (exibição)
"Acesso negado ou condicoes desfavoraveis." -> string literal
!! -> fim de instrução/sentença
multiplicador -> identificador
:= -> operador de atribuição
idade -> identificador
dividido -> operador aritmético: divisão
2 -> número inteiro
!! -> fim de instrução/sentença
resultadoLogico -> identificador
:= -> operador de atribuição
0 -> número inteiro
!! -> fim de instrução/sentença
fin -> delimitador de bloco: finalizar
si -> comando condicional: if
@{ -> parêntese esquerdo
resultadoLogico -> identificador
= -> operador relacional: igual a
1 -> número inteiro
<|> -> operador lógico: OR
!~ -> operador lógico: NOT
@{ -> parêntese esquerdo
idade -> identificador
<< -> operador relacional: menor que
10 -> número inteiro
}@ -> parêntese direito
}@ -> parêntese direito
comenzar -> delimitador de bloco: iniciar
# -> símbolo de saída
=> -> operador de saída (exibição)
"Condicao secundaria complexa verdadeira!" -> string literal
!! -> fim de instrução/sentença
fin -> delimitador de bloco: finalizar
demas -> comando condicional: else
comenzar -> delimitador de bloco: iniciar
# -> símbolo de saída
=> -> operador de saída (exibição)
"Condicao secundaria complexa falsa!" -> string literal
!! -> fim de instrução/sentença
fin -> delimitador de bloco: finalizar
# -> símbolo de saída
=> -> operador de saída (exibição)
"Multiplicador atual: " -> string literal
## -> separador de itens
[ -> parêntese reto esquerdo
multiplicador -> identificador
] -> parêntese reto direito
!! -> fim de instrução/sentença
# -> símbolo de saída
=> -> operador de saída (exibição)
"Taxa de Juros: " -> string literal
## -> separador de itens
[ -> parêntese reto esquerdo
taxaJuros -> identificador
] -> parêntese reto direito
!! -> fim de instrução/sentença
cambio -> comando condicional: switch
@{ -> parêntese esquerdo
categoria -> identificador
}@ -> parêntese direito
comenzar -> delimitador de bloco: iniciar
caso -> comando condicional: case
'A' -> caractere literal
::: -> dois pontos
# -> símbolo de saída
=> -> operador de saída (exibição)
"Categoria A selecionada." -> string literal
!! -> fim de instrução/sentença
multiplicador -> identificador
:= -> operador de atribuição
multiplicador -> identificador
mas -> operador aritmético: soma
10 -> número inteiro
!! -> fim de instrução/sentença
caso -> comando condicional: case
'B' -> caractere literal
::: -> dois pontos
# -> símbolo de saída
=> -> operador de saída (exibição)
"Categoria B selecionada." -> string literal
!! -> fim de instrução/sentença
multiplicador -> identificador
:= -> operador de atribuição
multiplicador -> identificador
menos -> operador aritmético: subtração
5 -> número inteiro
!! -> fim de instrução/sentença
caso -> comando condicional: case
'C' -> caractere literal
::: -> dois pontos
# -> símbolo de saída
=> -> operador de saída (exibição)
"Categoria C selecionada." -> string literal
!! -> fim de instrução/sentença
multiplicador -> identificador
:= -> operador de atribuição
multiplicador -> identificador
mas -> operador aritmético: soma
0 -> número inteiro
!! -> fim de instrução/sentença
fin -> delimitador de bloco: finalizar
# -> símbolo de saída
=> -> operador de saída (exibição)
"Fim da demonstracao de Comandos Condicionais." -> string literal
!! -> fim de instrução/sentença
fin -> delimitador de bloco: finalizar
