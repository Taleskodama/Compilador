comenzar -> delimitador de bloco: iniciar
ent -> tipo de dado: inteiro
contadorWhile -> identificador
!! -> fim de instrução/sentença
ent -> tipo de dado: inteiro
contadorFor -> identificador
!! -> fim de instrução/sentença
ent -> tipo de dado: inteiro
limiteLoop -> identificador
!! -> fim de instrução/sentença
# -> símbolo de saída
=> -> operador de saída (exibição)
"Defina o limite maximo para os loops (ex: 5): " -> string literal
!! -> fim de instrução/sentença
& -> símbolo de entrada
limiteLoop -> identificador
<= -> operador de entrada (leitura)
!! -> fim de instrução/sentença
# -> símbolo de saída
=> -> operador de saída (exibição)
"Iniciando loop WHILE:" -> string literal
!! -> fim de instrução/sentença
contadorWhile -> identificador
:= -> operador de atribuição
1 -> número inteiro
!! -> fim de instrução/sentença
mientras -> comando de repetição: while
@{ -> parêntese esquerdo
contadorWhile -> identificador
[* -> operador relacional: menor ou igual
limiteLoop -> identificador
}@ -> parêntese direito
comenzar -> delimitador de bloco: iniciar
# -> símbolo de saída
=> -> operador de saída (exibição)
"  WHILE Iteracao: " -> string literal
## -> separador de itens
[ -> parêntese reto esquerdo
contadorWhile -> identificador
] -> parêntese reto direito
!! -> fim de instrução/sentença
contadorWhile -> identificador
:= -> operador de atribuição
contadorWhile -> identificador
mas -> operador aritmético: soma
1 -> número inteiro
!! -> fim de instrução/sentença
fin -> delimitador de bloco: finalizar
# -> símbolo de saída
=> -> operador de saída (exibição)
"Loop WHILE finalizado." -> string literal
!! -> fim de instrução/sentença
# -> símbolo de saída
=> -> operador de saída (exibição)
"Iniciando loop FOR:" -> string literal
!! -> fim de instrução/sentença
para -> comando de repetição: for
contadorFor -> identificador
:= -> operador de atribuição
1 -> número inteiro
!! -> fim de instrução/sentença
contadorFor -> identificador
<< -> operador relacional: menor que
limiteLoop -> identificador
<<>> -> operador lógico: AND
contadorFor -> identificador
>> -> operador relacional: maior que
0 -> número inteiro
!! -> fim de instrução/sentença
contadorFor -> identificador
:= -> operador de atribuição
contadorFor -> identificador
mas -> operador aritmético: soma
1 -> número inteiro
comenzar -> delimitador de bloco: iniciar
si -> comando condicional: if
@{ -> parêntese esquerdo
contadorFor -> identificador
= -> operador relacional: igual a
3 -> número inteiro
}@ -> parêntese direito
comenzar -> delimitador de bloco: iniciar
# -> símbolo de saída
=> -> operador de saída (exibição)
"    Valor e 3." -> string literal
!! -> fim de instrução/sentença
fin -> delimitador de bloco: finalizar
demas -> comando condicional: else
comenzar -> delimitador de bloco: iniciar
# -> símbolo de saída
=> -> operador de saída (exibição)
"    Valor nao e 3." -> string literal
!! -> fim de instrução/sentença
fin -> delimitador de bloco: finalizar
contadorFor -> identificador
:= -> operador de atribuição
contadorFor -> identificador
por -> operador aritmético: multiplicação
1 -> número inteiro
!! -> fim de instrução/sentença
fin -> delimitador de bloco: finalizar
# -> símbolo de saída
=> -> operador de saída (exibição)
"Loop FOR finalizado." -> string literal
!! -> fim de instrução/sentença
# -> símbolo de saída
=> -> operador de saída (exibição)
"Fim da demonstracao de Comandos de Repeticao." -> string literal
!! -> fim de instrução/sentença
fin -> delimitador de bloco: finalizar
